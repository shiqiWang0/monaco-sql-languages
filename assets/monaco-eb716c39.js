var C=Object.defineProperty;var w=(t,i,r)=>i in t?C(t,i,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[i]=r;var o=(t,i,r)=>(w(t,typeof i!="symbol"?i+"":i,r),r);import{ac as l,ad as g,ae as c,af as h,ag as S,ah as R,ai as d,aj as a,ak as m,al as p,am as u,an as I,ao as f,ap as E,aq as y,ar as T,as as D,at as b,au as x,av as O,aw as P,ax as j,ay as Q,az as M,aA as k,aB as q,aC as A,aD as K,i as L,e as W}from"./index-d3ae3cf9.js";var z=Object.defineProperty,B=Object.getOwnPropertyDescriptor,N=(t,i,r,e)=>{for(var s=e>1?void 0:e?B(i,r):i,n=t.length-1,v;n>=0;n--)(v=t[n])&&(s=(e?v(i,r,s):v(s))||s);return e&&s&&z(i,r,s),s},V=(t,i)=>(r,e)=>i(r,e,t);let _=class{constructor(t){o(this,"_services");o(this,"simpleEditorModelResolverService",null);o(this,"_container");this.colorTheme=t}initWorkspace(t){this._container=t,this._services=this.createStandaloneServices()}get container(){return this._container}get services(){return this._services}get commandService(){return this.services.get(l)}get QuickInputService(){return this.services.get(g)}mergeEditorServices(t){if(t){const i=this.services;for(const r in t)r&&i.get(r)&&t[r]&&i.set(r,t[r])}}create(t,i,r){const e=this.services;this.mergeEditorServices(r),e.has(c)||(this.simpleEditorModelResolverService=new h(S.modelService.get()),e.set(c,this.simpleEditorModelResolverService));const s=new R(t,i,e,e.get(d),e.get(a),e.get(l),e.get(m),e.get(p),e.get(u),e.get(I),e.get(f),e.get(E),e.get(y),e.get(T),e.get(D));return this.simpleEditorModelResolverService&&this.simpleEditorModelResolverService.setEditor(s),this.colorTheme.setCurrent(this.colorTheme.getCurrent()),s}createDiffEditor(t,i,r){const e=this.services;this.mergeEditorServices(r),e.has(c)||(this.simpleEditorModelResolverService=new h(S.modelService.get()),e.set(c,this.simpleEditorModelResolverService));const s=new b(t,i,e,e.get(d),e.get(m),e.get(p),e.get(u),e.get(x),e.get(a),e.get(I),e.get(f),e.get(E),e.get(O),e.get(P),e.get(j));return this.simpleEditorModelResolverService&&this.simpleEditorModelResolverService.setEditor(s),this.colorTheme.setCurrent(this.colorTheme.getCurrent()),s}dispose(){}createStandaloneServices(){const t=new Q(this.container),i=t.get(d);t.has(M)||t.set(M,new k(t.get(a),t.get(l)));const r=i.createInstance(q),e=new A(S.codeEditorService.get(a),this.container);return t.set(K,e),t.set(g,r),this.dispose=t.dispose,t.dispose=()=>{},t}};_=N([L(),V(0,W("colorTheme"))],_);export{_ as MonacoService};
